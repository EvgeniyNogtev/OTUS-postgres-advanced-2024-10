CREATE SCHEMA main;

CREATE TABLE IF NOT EXISTS main.locales (
  id   VARCHAR(10)
    PRIMARY KEY,
  name VARCHAR(100) NOT NULL
    CHECK (name != '')
);

CREATE TABLE IF NOT EXISTS main.time_zone (
  id   VARCHAR(100)
    PRIMARY KEY,
  name VARCHAR(100) NOT NULL
    CHECK (name != ''),
  ofset VARCHAR(100) NOT NULL
    CHECK (name != '')
);

CREATE TABLE IF NOT EXISTS main.type_providers (
  id   INTEGER
    PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  name VARCHAR(100) NOT NULL
    CHECK (name != '')
);


CREATE TABLE IF NOT EXISTS main.nodes (
  uid UUID PRIMARY KEY,
  display_name VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS main.users (
  uid UUID NOT NULL DEFAULT gen_random_uuid(),
  node_uid UUID NOT NULL,
  display_name VARCHAR(500) NOT NULL,
  local_id VARCHAR(10) NOT NULL,
  time_zone_id VARCHAR(100) NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  deleted_at TIMESTAMPTZ,
   PRIMARY KEY (node_uid, uid)
);

CREATE INDEX users_created_at_idx ON main.users (created_at);

CREATE TABLE IF NOT EXISTS main.accounts (
  uid UUID NOT NULL DEFAULT gen_random_uuid(),
  node_uid UUID NOT NULL,
  provider_id INTEGER NOT NULL,
  login TEXT NOT NULL
    CHECK (login != ''),
  password TEXT NOT NULL
    CHECK (password != ''),
  user_uid UUID NOT NULL,
  payload JSONB,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  deleted_at TIMESTAMPTZ,
  PRIMARY KEY (node_uid, uid)
);

CREATE TABLE IF NOT EXISTS main.conferences(
  uid UUID NOT NULL DEFAULT gen_random_uuid(),
  node_uid UUID NOT NULL,
  start_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  stop_at TIMESTAMPTZ,
  owner_uid UUID NOT NULL,
  display_name VARCHAR(500),
  description TEXT,
  PRIMARY KEY (node_uid, uid)
);

CREATE INDEX conferences_start_at_idx ON main.conferences (start_at);

CREATE INDEX conferences_stop_at_idx ON main.conferences (stop_at) WHERE stop_at IS NOT NULL;

CREATE TABLE IF NOT EXISTS main.participants(
  conference_uid UUID NOT NULL,
  node_uid UUID NOT NULL,
  user_uid UUID NOT NULL,
  user_node_uid UUID NOT NULL,
  join_at TIMESTAMPTZ NOT NULL,
  leave_at TIMESTAMPTZ,
  device TEXT,
  PRIMARY KEY (node_uid, conference_uid, user_uid, join_at)
);

-- распределенные таблицы справочники
SELECT create_reference_table('main.locales');
SELECT create_reference_table('main.time_zone');
SELECT create_reference_table('main.nodes');
SELECT create_reference_table('main.type_providers');

-- распределенные таблицы
SELECT create_distributed_table(
  table_name => 'main.users',
  distribution_column => 'node_uid'
);

SELECT create_distributed_table(
  table_name => 'main.accounts',
  distribution_column => 'node_uid',
  colocate_with => 'main.users');

SELECT create_distributed_table(
  table_name => 'main.conferences',
  distribution_column => 'node_uid');

SELECT create_distributed_table(
  table_name => 'main.participants',
  distribution_column => 'node_uid',
  colocate_with => 'main.conferences');

--nodes
INSERT INTO main.nodes(
  uid,
  display_name
) VALUES (
  '11111111-1111-1111-1111-111111111111'::UUID,
  'First_node'::VARCHAR
),
(
  '22222222-2222-2222-2222-222222222222'::UUID,
  'Second_node'::VARCHAR
),
(
  '33333333-3333-3333-3333-333333333333'::UUID,
  'Third_node'::VARCHAR
);

ALTER TABLE main.users
  ADD CONSTRAINT users_local_id_fkey 
    FOREIGN KEY (local_id) 
      REFERENCES main.locales(id);
ALTER TABLE main.users
  ADD CONSTRAINT users_time_zone_id_fkey 
    FOREIGN KEY (time_zone_id) 
      REFERENCES main.time_zone(id);

ALTER TABLE main.accounts
  ADD CONSTRAINT account_provider_id_fkey 
    FOREIGN KEY (provider_id) 
      REFERENCES main.type_providers(id);
  
ALTER TABLE main.accounts
  ADD CONSTRAINT account_node_uid_user_uid_fkey 
    FOREIGN KEY (node_uid, user_uid) 
      REFERENCES main.users (node_uid, uid);

ALTER TABLE main.conferences
  ADD CONSTRAINT conference_node_uid_owner_uid_fkey
    FOREIGN KEY (node_uid, owner_uid)
      REFERENCES main.users (node_uid, uid);

-------------------------------------------------------------------------------------------------

CREATE SCHEMA main;

CREATE TABLE IF NOT EXISTS main.locales (
  id   VARCHAR(10)
    PRIMARY KEY,
  name VARCHAR(100) NOT NULL
    CHECK (name != '')
);

CREATE TABLE IF NOT EXISTS main.time_zone (
  id   VARCHAR(100)
    PRIMARY KEY,
  name VARCHAR(100) NOT NULL
    CHECK (name != ''),
  ofset VARCHAR(100) NOT NULL
    CHECK (name != '')
);

CREATE TABLE IF NOT EXISTS main.type_providers (
  id   INTEGER
    PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  name VARCHAR(100) NOT NULL
    CHECK (name != '')
);


CREATE TABLE IF NOT EXISTS main.nodes (
  uid UUID PRIMARY KEY,
  display_name VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS main.users (
  uid UUID NOT NULL DEFAULT gen_random_uuid(),
  node_uid UUID NOT NULL,
  display_name VARCHAR(500) NOT NULL,
  local_id VARCHAR(10) NOT NULL,
  time_zone_id VARCHAR(100) NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  deleted_at TIMESTAMPTZ,
   PRIMARY KEY (node_uid, uid)
);

CREATE INDEX users_created_at_idx ON main.users (created_at);

CREATE TABLE IF NOT EXISTS main.accounts (
  uid UUID NOT NULL DEFAULT gen_random_uuid(),
  node_uid UUID NOT NULL,
  provider_id INTEGER NOT NULL,
  login TEXT NOT NULL
    CHECK (login != ''),
  password TEXT NOT NULL
    CHECK (password != ''),
  user_uid UUID NOT NULL,
  payload JSONB,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  deleted_at TIMESTAMPTZ,
  PRIMARY KEY (node_uid, uid)
);

CREATE TABLE IF NOT EXISTS main.conferences(
  uid UUID NOT NULL DEFAULT gen_random_uuid(),
  node_uid UUID NOT NULL,
  start_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  stop_at TIMESTAMPTZ,
  owner_uid UUID NOT NULL,
  display_name VARCHAR(500),
  description TEXT,
  PRIMARY KEY (node_uid, uid)
);

CREATE INDEX conferences_start_at_idx ON main.conferences (start_at);

CREATE INDEX conferences_stop_at_idx ON main.conferences (stop_at) WHERE stop_at IS NOT NULL;

CREATE TABLE IF NOT EXISTS main.participants(
  conference_uid UUID NOT NULL,
  node_uid UUID NOT NULL,
  user_uid UUID NOT NULL,
  user_node_uid UUID NOT NULL,
  join_at TIMESTAMPTZ NOT NULL,
  leave_at TIMESTAMPTZ,
  device TEXT,
  PRIMARY KEY (node_uid, conference_uid, user_uid, join_at)
);

--nodes
INSERT INTO main.nodes(
  uid,
  display_name
) VALUES (
  '11111111-1111-1111-1111-111111111111'::UUID,
  'First_node'::VARCHAR
),
(
  '22222222-2222-2222-2222-222222222222'::UUID,
  'Second_node'::VARCHAR
),
(
  '33333333-3333-3333-3333-333333333333'::UUID,
  'Third_node'::VARCHAR
);

ALTER TABLE main.users
  ADD CONSTRAINT users_local_id_fkey
    FOREIGN KEY (local_id)
      REFERENCES main.locales(id);
ALTER TABLE main.users
  ADD CONSTRAINT users_time_zone_id_fkey
    FOREIGN KEY (time_zone_id)
      REFERENCES main.time_zone(id);

ALTER TABLE main.accounts
  ADD CONSTRAINT account_provider_id_fkey
    FOREIGN KEY (provider_id)
      REFERENCES main.type_providers(id);

ALTER TABLE main.accounts
  ADD CONSTRAINT account_node_uid_user_uid_fkey
    FOREIGN KEY (node_uid, user_uid)
      REFERENCES main.users (node_uid, uid);

ALTER TABLE main.conferences
  ADD CONSTRAINT conference_node_uid_owner_uid_fkey
    FOREIGN KEY (node_uid, owner_uid)
      REFERENCES main.users (node_uid, uid);

CREATE PUBLICATION pub_logic_####;

ALTER PUBLICATION pub_logic_####;
    ADD TABLE main.users WHERE (node_uid = '####');
ALTER PUBLICATION pub_logic_####;
    ADD TABLE main.accounts WHERE (node_uid = '####');
ALTER PUBLICATION pub_logic_####;
    ADD TABLE main.conferences WHERE (node_uid = '####');
ALTER PUBLICATION pub_logic_####;
    ADD TABLE main.participants WHERE (node_uid = '####');

CREATE SUBSCRIPTION ln1_to_ln2
         CONNECTION 'host=192.168.0.31 port=5432 user=postgres dbname=test_logic'
        PUBLICATION pub_logic_2
               WITH (origin = none);

CREATE SUBSCRIPTION ln1_to_ln3
         CONNECTION 'host=172.16.0.19 port=5432 user=postgres dbname=test_logic'
        PUBLICATION pub_logic_3
               WITH (origin = none);





